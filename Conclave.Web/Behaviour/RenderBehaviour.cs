using Conclave.Process;

namespace Conclave.Web.Behaviour {

	/// <summary>
	/// Controls the writting of results from the last view step
	/// in the view pipeline to the response stream.
	/// </summary>
	/// <remarks>
	/// <para>
	/// This behaviour is not responsible for producing or
	/// transforming views, merely the writting of results.
	/// Consult <see cref="Conclave.Web.Behaviour.ProcessViewsBehaviour"/>
	/// for the actually processing of views.
	/// </para>
	/// </remarks>
	public class RenderBehaviour : WebBehaviour {

		/// <summary>
		/// Creates a new instance of a render behaviour.
		/// </summary>
		/// <param name="name">The name of the render behaviour.</param>	
		/// <exception cref="WebException">
		/// Throws an exception is there is no view step to actually render.
		/// </exception>
		public RenderBehaviour(string name) : base(name) { }

		/// <inheritdoc />
		public override void Action(IEvent ev, WebContext context) {
			// first check that we have something to write to the response stream
			if (context.ViewSteps.HasSteps) {
				// then check to see if it's text to be written out
				if (context.ViewSteps.Last.HasContent) {
					context.Response.ContentType = context.ViewSteps.Last.ContentType;
					context.Response.Write(context.ViewSteps.Last.Content);
				} else {
					throw new WebException("No content was generated by the last view step to render.");
				}
			} else {
				throw new WebException("There are no view steps to render for this request.");
			}
		}
	}
}
