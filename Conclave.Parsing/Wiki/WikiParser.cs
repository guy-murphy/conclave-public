/* Generated By:CSharpCC: Do not edit this line. WikiParser.cs */

using Conclave.Parsing.Wiki.Model.Model;

namespace Conclave.Parsing.Wiki {


using System;
using Conclave;
using Conclave.Extensions;

	public class WikiParser : WikiParserConstants {

        private WikiElement _root;
        private WikiElement _current;

        public WikiElement Root {
                get { return _root; }
        }

        public WikiElement Current {
                get { return _current; }
        }

        //public WikiParser (String text): this(new StringReader(text) {
        //}

		public WikiElement PushElement(WikiElement element) {
			if (element == null) throw new ArgumentNullException("element");

			if (_root == null) {
				_root = element;
			} else {
				_current.AddChild(element);
			}
			_current = element;
			return element;
		}

        public WikiElement PopElement() {
                WikiElement result = _current;
                _current = _current.Parent;
                return result;
        }

        public WikiElement PushSibling(WikiElement element) {
                this.PopElement();
                this.PushElement(element);
                return element;
        }

        public WikiElement AddChildElement(WikiElement element) {
                _current.AddChild(element);
                return element;
        }

/*************************************
 **** NON-TERMINALS / PRODUCTIONS ****
 *************************************/

// this is where we infer higher order
// compositions of the base tokens
// all "clever" matching should occur here

/* Inline Products */
  public void wiki() {
                this.PushElement(new DocumentElement());
    while (true) {
      if (mcc_2_1(5)) {
        ;
      } else {
        goto label_1;
      }
      if (mcc_2_2(5)) {
        blocks();
      } else if (mcc_2_3(5)) {
        heading();
      } else if (mcc_2_4(5)) {
        list();
      } else if (mcc_2_5(5)) {
        empty_line();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_1: ;
    
  }

  public void line() {
        Token t = null;
                //if (token_source.curLexState == WikiParserConstants.IN_TABLE)
        if (token.kind == WikiParserConstants.IN_TABLE)
                {
                        this.PushElement(new TableRowElement());
                }
                else
                {
                        this.PushElement(new LineElement());
                }
    content();
    if (mcc_2_6(5)) {
      new_line();
    } else if (mcc_2_7(5)) {
      mcc_consume_token(0);
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
                if (token.kind== WikiParserConstants.IN_TABLE)
                {
                        ((TableRowElement)this.Current).Parse();
                }
                this.PopElement();
  }

  public void code_line() {
        Token t = null;
                this.PushElement(new LineElement());
    code_text();
    if (mcc_2_8(5)) {
      new_line();
    } else if (mcc_2_9(5)) {
      mcc_consume_token(0);
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
                this.PopElement();
  }

  public void box() {
                this.PushElement(new BoxElement());
    mcc_consume_token(OPEN_BLOCK_BOX);
    box_content();
    mcc_consume_token(CLOSE_BLOCK_BOX);
                this.PopElement();
  }

  public void code() {
        this.PushElement(new CodeElement());
    mcc_consume_token(OPEN_BLOCK_CODE);
    code_content();
    mcc_consume_token(CLOSE_BLOCK_CODE);
    this.PopElement();
  }

  public void table() {
                this.PushElement(new TableElement());
    mcc_consume_token(OPEN_BLOCK_TABLE);
    block_content();
    mcc_consume_token(CLOSE_BLOCK_TABLE);
                this.PopElement();
  }

  public void block_quote() {
                this.PushElement(new BlockQuoteElement());
    mcc_consume_token(OPEN_BLOCK_QUOTE);
    box_content();
    mcc_consume_token(CLOSE_BLOCK_QUOTE);
                this.PopElement();
  }

  public void form() {
                Console.WriteLine("<form>\n");
    mcc_consume_token(OPEN_BLOCK_FORM);
    block_content();
    mcc_consume_token(CLOSE_BLOCK_FORM);
                Console.WriteLine("</form>\n");
  }

  public void block() {
                this.PushElement(new BlockElement());
    block_content();
                this.PopElement();
  }

  public void block_content() {
    if (mcc_2_10(5)) {
      block_title();
    } else {
      ;
    }
    while (true) {
      line();
      if (mcc_2_11(5)) {
        ;
      } else {
        goto label_2;
      }
    }label_2: ;
    
  }

  public void box_content() {
    if (mcc_2_12(5)) {
      block_title();
    } else {
      ;
    }
    while (true) {
      if (mcc_2_13(5)) {
        line();
      } else if (mcc_2_14(5)) {
        empty_line();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_15(5)) {
        ;
      } else {
        goto label_3;
      }
    }label_3: ;
    
  }

  public void code_content() {
    if (mcc_2_16(5)) {
      block_title();
    } else {
      ;
    }
    while (true) {
      if (mcc_2_17(5)) {
        code_line();
      } else if (mcc_2_18(5)) {
        empty_line();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_19(5)) {
        ;
      } else {
        goto label_4;
      }
    }label_4: ;
    
  }

  public void block_title() {
        Token t = null;

    t = mcc_consume_token(BLOCK_TITLE);
                this.AddChildElement(new TitleElement(t.image));
  }

  public void blocks() {
    if (mcc_2_20(5)) {
      code();
    } else if (mcc_2_21(5)) {
      block();
    } else if (mcc_2_22(5)) {
      block_quote();
    } else if (mcc_2_23(5)) {
      table();
    } else if (mcc_2_24(5)) {
      box();
    } else if (mcc_2_25(5)) {
      form();
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void empty_line() {
    while (true) {
      if (mcc_2_26(5)) {
        ;
      } else {
        goto label_5;
      }
      whitespace();
    }label_5: ;
    
    new_line();
                this.AddChildElement(new EmptyLineElement());
  }

  public void whitespace() {
        Token t = null;
    t = mcc_consume_token(WS);
                this.AddChildElement(new WhitespaceElement(t.image));
  }

  public void new_line() {
    mcc_consume_token(NL);

  }

  public void list() {
                this.PushElement(new ListElement());
    while (true) {
      if (mcc_2_27(5)) {
        list_item1();
      } else if (mcc_2_28(5)) {
        list_item2();
      } else if (mcc_2_29(5)) {
        list_item3();
      } else if (mcc_2_30(5)) {
        list_item4();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_31(5)) {
        ;
      } else {
        goto label_6;
      }
    }label_6: ;
    
                ((ListElement)this.Current).PostProcess();
                this.PopElement();
  }

  public void list_item1() {
                ListItemElement li = new ListItemElement();
                li.Level = 0;
                this.PushElement(li);
    mcc_consume_token(MULTIPLY);
    content();
    mcc_consume_token(NL);
                this.PopElement();
  }

  public void list_item2() {
                ListItemElement li = new ListItemElement();
                li.Level = 1;
                this.PushElement(li);
    mcc_consume_token(MULTIPLY);
    mcc_consume_token(MULTIPLY);
    content();
    mcc_consume_token(NL);
                this.PopElement();
  }

  public void list_item3() {
                ListItemElement li = new ListItemElement();
                li.Level = 2;
                this.PushElement(li);
    mcc_consume_token(MULTIPLY);
    mcc_consume_token(MULTIPLY);
    mcc_consume_token(MULTIPLY);
    content();
    mcc_consume_token(NL);
                this.PopElement();
  }

  public void list_item4() {
                ListItemElement li = new ListItemElement();
                li.Level = 3;
                this.PushElement(li);
    mcc_consume_token(MULTIPLY);
    mcc_consume_token(MULTIPLY);
    mcc_consume_token(MULTIPLY);
    mcc_consume_token(MULTIPLY);
    content();
    mcc_consume_token(NL);
                this.PopElement();
  }

  public void link() {
        Token t = null;

    t = mcc_consume_token(LINK);
                this.AddChildElement(new LinkElement(t.image));
  }

  public void topic_link() {
        Token t = null;

    t = mcc_consume_token(TOPIC_LINK);
                this.AddChildElement(new LinkElement(t.image));
  }

  public void safe_text() {
        Token t = null;
    t = mcc_consume_token(SAFE_TEXT);
                this.AddChildElement(new TextElement(t.image));
  }

  public void code_text() {
        Token t = null;
    t = mcc_consume_token(CODE_TEXT);
                this.AddChildElement(new TextElement(t.image));
  }

  public void emphasis() {
                this.PushElement(new EmphasisElement());
    mcc_consume_token(HAT);
    while (true) {
      if (mcc_2_32(5)) {
        bold();
      } else if (mcc_2_33(5)) {
        link();
      } else if (mcc_2_34(5)) {
        url();
      } else if (mcc_2_35(5)) {
        safe_text();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_36(5)) {
        ;
      } else {
        goto label_7;
      }
    }label_7: ;
    
    mcc_consume_token(HAT);
                this.PopElement();
  }

  public void bold() {
                this.PushElement(new StrongElement());
    mcc_consume_token(MULTIPLY);
    while (true) {
      if (mcc_2_37(5)) {
        emphasis();
      } else if (mcc_2_38(5)) {
        links();
      } else if (mcc_2_39(5)) {
        url();
      } else if (mcc_2_40(5)) {
        safe_text();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_41(5)) {
        ;
      } else {
        goto label_8;
      }
    }label_8: ;
    
    mcc_consume_token(MULTIPLY);
                this.PopElement();
  }

  public void inline_code() {
    this.PushElement(new InlineCodeElement());
    mcc_consume_token(ACUTE);
    while (true) {
      if (mcc_2_42(5)) {
        emphasis();
      } else if (mcc_2_43(5)) {
        links();
      } else if (mcc_2_44(5)) {
        url();
      } else if (mcc_2_45(5)) {
        safe_text();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_46(5)) {
        ;
      } else {
        goto label_9;
      }
    }label_9: ;
    
    mcc_consume_token(ACUTE);
    this.PopElement();
  }

// TODO: implement
  public void url() {
        // wont ever match
        Token t = null;

    t = mcc_consume_token(URL);

  }

  public void links() {
    if (mcc_2_47(5)) {
      link();
    } else if (mcc_2_48(5)) {
      topic_link();
    } else if (mcc_2_49(5)) {
      url();
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void content() {
    while (true) {
      if (mcc_2_50(5)) {
        markup();
      } else if (mcc_2_51(5)) {
        inline_code();
      } else if (mcc_2_52(5)) {
        links();
      } else if (mcc_2_53(5)) {
        bold();
      } else if (mcc_2_54(5)) {
        emphasis();
      } else if (mcc_2_55(5)) {
        safe_text();
      } else if (mcc_2_56(5)) {
        whitespace();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_57(5)) {
        ;
      } else {
        goto label_10;
      }
    }label_10: ;
    
  }

  public void markup() {
    while (true) {
      if (mcc_2_58(5)) {
        lt();
      } else if (mcc_2_59(5)) {
        gt();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (mcc_2_60(5)) {
        ;
      } else {
        goto label_11;
      }
    }label_11: ;
    
  }

  public void lt() {
    mcc_consume_token(LT);
    this.AddChildElement(new TextElement("&lt;"));
  }

  public void gt() {
    mcc_consume_token(GT);
    this.AddChildElement(new TextElement("&gt;"));
  }

  public void heading() {
        Token open = null;
        Token close = null;
    open = mcc_consume_token(OPEN_HEADING);
                this.PushElement(new HeadingElement(open.image.Length));
    safe_text();
    close = mcc_consume_token(CLOSE_HEADING);
                this.PopElement();
    new_line();
  }

  private bool mcc_2_1(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_1(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(0, xla); }
  }

  private bool mcc_2_2(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_2(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(1, xla); }
  }

  private bool mcc_2_3(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_3(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(2, xla); }
  }

  private bool mcc_2_4(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_4(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(3, xla); }
  }

  private bool mcc_2_5(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_5(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(4, xla); }
  }

  private bool mcc_2_6(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_6(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(5, xla); }
  }

  private bool mcc_2_7(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_7(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(6, xla); }
  }

  private bool mcc_2_8(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_8(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(7, xla); }
  }

  private bool mcc_2_9(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_9(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(8, xla); }
  }

  private bool mcc_2_10(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_10(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(9, xla); }
  }

  private bool mcc_2_11(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_11(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(10, xla); }
  }

  private bool mcc_2_12(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_12(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(11, xla); }
  }

  private bool mcc_2_13(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_13(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(12, xla); }
  }

  private bool mcc_2_14(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_14(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(13, xla); }
  }

  private bool mcc_2_15(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_15(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(14, xla); }
  }

  private bool mcc_2_16(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_16(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(15, xla); }
  }

  private bool mcc_2_17(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_17(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(16, xla); }
  }

  private bool mcc_2_18(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_18(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(17, xla); }
  }

  private bool mcc_2_19(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_19(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(18, xla); }
  }

  private bool mcc_2_20(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_20(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(19, xla); }
  }

  private bool mcc_2_21(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_21(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(20, xla); }
  }

  private bool mcc_2_22(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_22(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(21, xla); }
  }

  private bool mcc_2_23(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_23(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(22, xla); }
  }

  private bool mcc_2_24(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_24(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(23, xla); }
  }

  private bool mcc_2_25(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_25(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(24, xla); }
  }

  private bool mcc_2_26(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_26(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(25, xla); }
  }

  private bool mcc_2_27(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_27(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(26, xla); }
  }

  private bool mcc_2_28(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_28(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(27, xla); }
  }

  private bool mcc_2_29(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_29(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(28, xla); }
  }

  private bool mcc_2_30(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_30(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(29, xla); }
  }

  private bool mcc_2_31(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_31(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(30, xla); }
  }

  private bool mcc_2_32(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_32(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(31, xla); }
  }

  private bool mcc_2_33(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_33(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(32, xla); }
  }

  private bool mcc_2_34(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_34(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(33, xla); }
  }

  private bool mcc_2_35(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_35(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(34, xla); }
  }

  private bool mcc_2_36(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_36(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(35, xla); }
  }

  private bool mcc_2_37(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_37(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(36, xla); }
  }

  private bool mcc_2_38(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_38(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(37, xla); }
  }

  private bool mcc_2_39(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_39(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(38, xla); }
  }

  private bool mcc_2_40(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_40(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(39, xla); }
  }

  private bool mcc_2_41(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_41(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(40, xla); }
  }

  private bool mcc_2_42(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_42(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(41, xla); }
  }

  private bool mcc_2_43(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_43(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(42, xla); }
  }

  private bool mcc_2_44(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_44(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(43, xla); }
  }

  private bool mcc_2_45(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_45(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(44, xla); }
  }

  private bool mcc_2_46(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_46(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(45, xla); }
  }

  private bool mcc_2_47(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_47(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(46, xla); }
  }

  private bool mcc_2_48(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_48(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(47, xla); }
  }

  private bool mcc_2_49(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_49(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(48, xla); }
  }

  private bool mcc_2_50(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_50(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(49, xla); }
  }

  private bool mcc_2_51(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_51(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(50, xla); }
  }

  private bool mcc_2_52(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_52(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(51, xla); }
  }

  private bool mcc_2_53(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_53(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(52, xla); }
  }

  private bool mcc_2_54(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_54(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(53, xla); }
  }

  private bool mcc_2_55(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_55(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(54, xla); }
  }

  private bool mcc_2_56(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_56(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(55, xla); }
  }

  private bool mcc_2_57(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_57(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(56, xla); }
  }

  private bool mcc_2_58(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_58(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(57, xla); }
  }

  private bool mcc_2_59(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_59(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(58, xla); }
  }

  private bool mcc_2_60(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_60(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(59, xla); }
  }

  private bool mcc_3_39() {
    if (mcc_3R_33()) return true;
    return false;
  }

  private bool mcc_3R_26() {
    if (mcc_scan_token(WS)) return true;
    return false;
  }

  private bool mcc_3R_33() {
    if (mcc_scan_token(URL)) return true;
    return false;
  }

  private bool mcc_3_43() {
    if (mcc_3R_36()) return true;
    return false;
  }

  private bool mcc_3_22() {
    if (mcc_3R_22()) return true;
    return false;
  }

  private bool mcc_3_38() {
    if (mcc_3R_36()) return true;
    return false;
  }

  private bool mcc_3_26() {
    if (mcc_3R_26()) return true;
    return false;
  }

  private bool mcc_3R_15() {
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_26()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_3R_16()) return true;
    return false;
  }

  private bool mcc_3_21() {
    if (mcc_3R_21()) return true;
    return false;
  }

  private bool mcc_3_42() {
    if (mcc_3R_35()) return true;
    return false;
  }

  private bool mcc_3_46() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_42()) {
    mcc_scanpos = xsp;
    if (mcc_3_43()) {
    mcc_scanpos = xsp;
    if (mcc_3_44()) {
    mcc_scanpos = xsp;
    if (mcc_3_45()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_35() {
    if (mcc_3R_34()) return true;
    return false;
  }

  private bool mcc_3_18() {
    if (mcc_3R_15()) return true;
    return false;
  }

  private bool mcc_3_37() {
    if (mcc_3R_35()) return true;
    return false;
  }

  private bool mcc_3_41() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_37()) {
    mcc_scanpos = xsp;
    if (mcc_3_38()) {
    mcc_scanpos = xsp;
    if (mcc_3_39()) {
    mcc_scanpos = xsp;
    if (mcc_3_40()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_20() {
    if (mcc_3R_20()) return true;
    return false;
  }

  private bool mcc_3R_12() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_20()) {
    mcc_scanpos = xsp;
    if (mcc_3_21()) {
    mcc_scanpos = xsp;
    if (mcc_3_22()) {
    mcc_scanpos = xsp;
    if (mcc_3_23()) {
    mcc_scanpos = xsp;
    if (mcc_3_24()) {
    mcc_scanpos = xsp;
    if (mcc_3_25()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3_34() {
    if (mcc_3R_33()) return true;
    return false;
  }

  private bool mcc_3_14() {
    if (mcc_3R_15()) return true;
    return false;
  }

  private bool mcc_3R_39() {
    if (mcc_scan_token(ACUTE)) return true;
    Token xsp;
    if (mcc_3_46()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_46()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(ACUTE)) return true;
    return false;
  }

  private bool mcc_3_33() {
    if (mcc_3R_32()) return true;
    return false;
  }

  private bool mcc_3_19() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_17()) {
    mcc_scanpos = xsp;
    if (mcc_3_18()) return true;
    }
    return false;
  }

  private bool mcc_3_17() {
    if (mcc_3R_19()) return true;
    return false;
  }

  private bool mcc_3_13() {
    if (mcc_3R_18()) return true;
    return false;
  }

  private bool mcc_3_15() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_13()) {
    mcc_scanpos = xsp;
    if (mcc_3_14()) return true;
    }
    return false;
  }

  private bool mcc_3R_31() {
    if (mcc_scan_token(MULTIPLY)) return true;
    Token xsp;
    if (mcc_3_41()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_41()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(MULTIPLY)) return true;
    return false;
  }

  private bool mcc_3R_17() {
    if (mcc_scan_token(BLOCK_TITLE)) return true;
    return false;
  }

  private bool mcc_3_32() {
    if (mcc_3R_31()) return true;
    return false;
  }

  private bool mcc_3_36() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_32()) {
    mcc_scanpos = xsp;
    if (mcc_3_33()) {
    mcc_scanpos = xsp;
    if (mcc_3_34()) {
    mcc_scanpos = xsp;
    if (mcc_3_35()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_11() {
    if (mcc_3R_18()) return true;
    return false;
  }

  private bool mcc_3R_35() {
    if (mcc_scan_token(HAT)) return true;
    Token xsp;
    if (mcc_3_36()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_36()) { mcc_scanpos = xsp; break; }
    }
    if (mcc_scan_token(HAT)) return true;
    return false;
  }

  private bool mcc_3_16() {
    if (mcc_3R_17()) return true;
    return false;
  }

  private bool mcc_3R_44() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_16()) mcc_scanpos = xsp;
    if (mcc_3_19()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_19()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_12() {
    if (mcc_3R_17()) return true;
    return false;
  }

  private bool mcc_3R_46() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_12()) mcc_scanpos = xsp;
    if (mcc_3_15()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_15()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_10() {
    if (mcc_3R_17()) return true;
    return false;
  }

  private bool mcc_3R_45() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_10()) mcc_scanpos = xsp;
    if (mcc_3_11()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_11()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_43() {
    if (mcc_scan_token(CODE_TEXT)) return true;
    return false;
  }

  private bool mcc_3R_34() {
    if (mcc_scan_token(SAFE_TEXT)) return true;
    return false;
  }

  private bool mcc_3R_21() {
    if (mcc_3R_45()) return true;
    return false;
  }

  private bool mcc_3R_37() {
    if (mcc_scan_token(TOPIC_LINK)) return true;
    return false;
  }

  private bool mcc_3R_25() {
    if (mcc_scan_token(OPEN_BLOCK_FORM)) return true;
    if (mcc_3R_45()) return true;
    if (mcc_scan_token(CLOSE_BLOCK_FORM)) return true;
    return false;
  }

  private bool mcc_3R_32() {
    if (mcc_scan_token(LINK)) return true;
    return false;
  }

  private bool mcc_3R_22() {
    if (mcc_scan_token(OPEN_BLOCK_QUOTE)) return true;
    if (mcc_3R_46()) return true;
    if (mcc_scan_token(CLOSE_BLOCK_QUOTE)) return true;
    return false;
  }

  private bool mcc_3R_30() {
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_3R_42()) return true;
    return false;
  }

  private bool mcc_3_56() {
    if (mcc_3R_26()) return true;
    return false;
  }

  private bool mcc_3R_23() {
    if (mcc_scan_token(OPEN_BLOCK_TABLE)) return true;
    if (mcc_3R_45()) return true;
    if (mcc_scan_token(CLOSE_BLOCK_TABLE)) return true;
    return false;
  }

  private bool mcc_3_55() {
    if (mcc_3R_34()) return true;
    return false;
  }

  private bool mcc_3R_29() {
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_3R_42()) return true;
    if (mcc_scan_token(NL)) return true;
    return false;
  }

  private bool mcc_3_30() {
    if (mcc_3R_30()) return true;
    return false;
  }

  private bool mcc_3_9() {
    if (mcc_scan_token(0)) return true;
    return false;
  }

  private bool mcc_3R_20() {
    if (mcc_scan_token(OPEN_BLOCK_CODE)) return true;
    if (mcc_3R_44()) return true;
    if (mcc_scan_token(CLOSE_BLOCK_CODE)) return true;
    return false;
  }

  private bool mcc_3_54() {
    if (mcc_3R_35()) return true;
    return false;
  }

  private bool mcc_3R_13() {
    if (mcc_scan_token(OPEN_HEADING)) return true;
    if (mcc_3R_34()) return true;
    if (mcc_scan_token(CLOSE_HEADING)) return true;
    if (mcc_3R_16()) return true;
    return false;
  }

  private bool mcc_3_29() {
    if (mcc_3R_29()) return true;
    return false;
  }

  private bool mcc_3R_28() {
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_3R_42()) return true;
    if (mcc_scan_token(NL)) return true;
    return false;
  }

  private bool mcc_3_8() {
    if (mcc_3R_16()) return true;
    return false;
  }

  private bool mcc_3_53() {
    if (mcc_3R_31()) return true;
    return false;
  }

  private bool mcc_3R_24() {
    if (mcc_scan_token(OPEN_BLOCK_BOX)) return true;
    if (mcc_3R_46()) return true;
    if (mcc_scan_token(CLOSE_BLOCK_BOX)) return true;
    return false;
  }

  private bool mcc_3_52() {
    if (mcc_3R_36()) return true;
    return false;
  }

  private bool mcc_3_7() {
    if (mcc_scan_token(0)) return true;
    return false;
  }

  private bool mcc_3_28() {
    if (mcc_3R_28()) return true;
    return false;
  }

  private bool mcc_3R_41() {
    if (mcc_scan_token(GT)) return true;
    return false;
  }

  private bool mcc_3R_27() {
    if (mcc_scan_token(MULTIPLY)) return true;
    if (mcc_3R_42()) return true;
    if (mcc_scan_token(NL)) return true;
    return false;
  }

  private bool mcc_3R_19() {
    if (mcc_3R_43()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_8()) {
    mcc_scanpos = xsp;
    if (mcc_3_9()) return true;
    }
    return false;
  }

  private bool mcc_3_49() {
    if (mcc_3R_33()) return true;
    return false;
  }

  private bool mcc_3_6() {
    if (mcc_3R_16()) return true;
    return false;
  }

  private bool mcc_3_51() {
    if (mcc_3R_39()) return true;
    return false;
  }

  private bool mcc_3R_40() {
    if (mcc_scan_token(LT)) return true;
    return false;
  }

  private bool mcc_3_31() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_27()) {
    mcc_scanpos = xsp;
    if (mcc_3_28()) {
    mcc_scanpos = xsp;
    if (mcc_3_29()) {
    mcc_scanpos = xsp;
    if (mcc_3_30()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_27() {
    if (mcc_3R_27()) return true;
    return false;
  }

  private bool mcc_3_59() {
    if (mcc_3R_41()) return true;
    return false;
  }

  private bool mcc_3_25() {
    if (mcc_3R_25()) return true;
    return false;
  }

  private bool mcc_3R_14() {
    Token xsp;
    if (mcc_3_31()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_31()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_58() {
    if (mcc_3R_40()) return true;
    return false;
  }

  private bool mcc_3_60() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_58()) {
    mcc_scanpos = xsp;
    if (mcc_3_59()) return true;
    }
    return false;
  }

  private bool mcc_3R_38() {
    Token xsp;
    if (mcc_3_60()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_60()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_50() {
    if (mcc_3R_38()) return true;
    return false;
  }

  private bool mcc_3_57() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_50()) {
    mcc_scanpos = xsp;
    if (mcc_3_51()) {
    mcc_scanpos = xsp;
    if (mcc_3_52()) {
    mcc_scanpos = xsp;
    if (mcc_3_53()) {
    mcc_scanpos = xsp;
    if (mcc_3_54()) {
    mcc_scanpos = xsp;
    if (mcc_3_55()) {
    mcc_scanpos = xsp;
    if (mcc_3_56()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_42() {
    Token xsp;
    if (mcc_3_57()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_57()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_24() {
    if (mcc_3R_24()) return true;
    return false;
  }

  private bool mcc_3_48() {
    if (mcc_3R_37()) return true;
    return false;
  }

  private bool mcc_3R_16() {
    if (mcc_scan_token(NL)) return true;
    return false;
  }

  private bool mcc_3_45() {
    if (mcc_3R_34()) return true;
    return false;
  }

  private bool mcc_3R_36() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_47()) {
    mcc_scanpos = xsp;
    if (mcc_3_48()) {
    mcc_scanpos = xsp;
    if (mcc_3_49()) return true;
    }
    }
    return false;
  }

  private bool mcc_3_47() {
    if (mcc_3R_32()) return true;
    return false;
  }

  private bool mcc_3_23() {
    if (mcc_3R_23()) return true;
    return false;
  }

  private bool mcc_3R_18() {
    if (mcc_3R_42()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_6()) {
    mcc_scanpos = xsp;
    if (mcc_3_7()) return true;
    }
    return false;
  }

  private bool mcc_3_5() {
    if (mcc_3R_15()) return true;
    return false;
  }

  private bool mcc_3_40() {
    if (mcc_3R_34()) return true;
    return false;
  }

  private bool mcc_3_4() {
    if (mcc_3R_14()) return true;
    return false;
  }

  private bool mcc_3_3() {
    if (mcc_3R_13()) return true;
    return false;
  }

  private bool mcc_3_44() {
    if (mcc_3R_33()) return true;
    return false;
  }

  private bool mcc_3_2() {
    if (mcc_3R_12()) return true;
    return false;
  }

  private bool mcc_3_1() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_2()) {
    mcc_scanpos = xsp;
    if (mcc_3_3()) {
    mcc_scanpos = xsp;
    if (mcc_3_4()) {
    mcc_scanpos = xsp;
    if (mcc_3_5()) return true;
    }
    }
    }
    return false;
  }

  public WikiParserTokenManager token_source;
  SimpleCharStream mcc_input_stream;
  public Token token, mcc_nt;
  private Token mcc_scanpos, mcc_lastpos;
  private int mcc_la;
  public bool lookingAhead = false;
  private bool mcc_semLA;
  private int mcc_gen;
  private int[] mcc_la1 = new int[0];
  static private int[] mcc_la1_0;
  static private int[] mcc_la1_1;
  static private int[] mcc_la1_2;
  static private int[] mcc_la1_3;
  static WikiParser() {
      mcc_gla1_0();
      mcc_gla1_1();
      mcc_gla1_2();
      mcc_gla1_3();
   }
   private static void mcc_gla1_0() {
      mcc_la1_0 = new int[] {};
   }
   private static void mcc_gla1_1() {
      mcc_la1_1 = new int[] {};
   }
   private static void mcc_gla1_2() {
      mcc_la1_2 = new int[] {};
   }
   private static void mcc_gla1_3() {
      mcc_la1_3 = new int[] {};
   }
  private MccCalls[] mcc_2_rtns = new MccCalls[60];
  private bool mcc_rescan = false;
  private int mcc_gc = 0;

  public WikiParser(System.IO.Stream stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WikiParserTokenManager(mcc_input_stream);
    token = new Token();
    token.next = mcc_nt = token_source.GetNextToken();
    mcc_gen = 0;
    for (int i = 0; i < 0; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    token.next = mcc_nt = token_source.GetNextToken();
    mcc_gen = 0;
    for (int i = 0; i < 0; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public WikiParser(System.IO.TextReader stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WikiParserTokenManager(mcc_input_stream);
    token = new Token();
    token.next = mcc_nt = token_source.GetNextToken();
    mcc_gen = 0;
    for (int i = 0; i < 0; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    token.next = mcc_nt = token_source.GetNextToken();
    mcc_gen = 0;
    for (int i = 0; i < 0; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public WikiParser(WikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = mcc_nt = token_source.GetNextToken();
    mcc_gen = 0;
    for (int i = 0; i < 0; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(WikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = mcc_nt = token_source.GetNextToken();
    mcc_gen = 0;
    for (int i = 0; i < 0; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

   private Token mcc_consume_token(int kind) {
    Token oldToken = token;
    if ((token = mcc_nt).next != null) mcc_nt = mcc_nt.next;
    else mcc_nt = mcc_nt.next = token_source.GetNextToken();
    if (token.kind == kind) {
      mcc_gen++;
      if (++mcc_gc > 100) {
        mcc_gc = 0;
        for (int i = 0; i < mcc_2_rtns.Length; i++) {
          MccCalls c = mcc_2_rtns[i];
          while (c != null) {
            if (c.gen < mcc_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    mcc_nt = token;
    token = oldToken;
    mcc_kind = kind;
    throw GenerateParseException();
  }

  private class LookaheadSuccess : System.Exception { }
  private LookaheadSuccess mcc_ls = new LookaheadSuccess();
  private bool mcc_scan_token(int kind) {
    if (mcc_scanpos == mcc_lastpos) {
      mcc_la--;
      if (mcc_scanpos.next == null) {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next = token_source.GetNextToken();
      } else {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next;
      }
    } else {
      mcc_scanpos = mcc_scanpos.next;
    }
    if (mcc_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != mcc_scanpos) { i++; tok = tok.next; }
      if (tok != null) mcc_add_error_token(kind, i);
    }
    if (mcc_scanpos.kind != kind) return true;
    if (mcc_la == 0 && mcc_scanpos == mcc_lastpos) throw mcc_ls;
    return false;
  }

  public Token GetNextToken() {
    if ((token = mcc_nt).next != null) mcc_nt = mcc_nt.next;
    else mcc_nt = mcc_nt.next = token_source.GetNextToken();
    mcc_gen++;
    return token;
  }

  public Token GetToken(int index) {
    Token t = lookingAhead ? mcc_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.GetNextToken();
    }
    return t;
  }

  private System.Collections.ArrayList mcc_expentries = new System.Collections.ArrayList();
  private int[] mcc_expentry;
  private int mcc_kind = -1;
  private int[] mcc_lasttokens = new int[100];
  private int mcc_endpos;

  private void mcc_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == mcc_endpos + 1) {
      mcc_lasttokens[mcc_endpos++] = kind;
    } else if (mcc_endpos != 0) {
      mcc_expentry = new int[mcc_endpos];
      for (int i = 0; i < mcc_endpos; i++) {
        mcc_expentry[i] = mcc_lasttokens[i];
      }
      bool exists = false;
      for (System.Collections.IEnumerator e = mcc_expentries.GetEnumerator(); e.MoveNext();) {
        int[] oldentry = (int[])e.Current;
        if (oldentry.Length == mcc_expentry.Length) {
          exists = true;
          for (int i = 0; i < mcc_expentry.Length; i++) {
            if (oldentry[i] != mcc_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) mcc_expentries.Add(mcc_expentry);
      if (pos != 0) mcc_lasttokens[(mcc_endpos = pos) - 1] = kind;
    }
  }

  public ParseException GenerateParseException() {
    mcc_expentries.Clear();
    bool[] la1tokens = new bool[116];
    for (int i = 0; i < 116; i++) {
      la1tokens[i] = false;
    }
    if (mcc_kind >= 0) {
      la1tokens[mcc_kind] = true;
      mcc_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (mcc_la1[i] == mcc_gen) {
        for (int j = 0; j < 32; j++) {
          if ((mcc_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((mcc_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((mcc_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((mcc_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 116; i++) {
      if (la1tokens[i]) {
        mcc_expentry = new int[1];
        mcc_expentry[0] = i;
        mcc_expentries.Add(mcc_expentry);
      }
    }
    mcc_endpos = 0;
    mcc_rescan_token();
    mcc_add_error_token(0, 0);
    int[][] exptokseq = new int[mcc_expentries.Count][];
    for (int i = 0; i < mcc_expentries.Count; i++) {
      exptokseq[i] = (int[])mcc_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void mcc_rescan_token() {
    mcc_rescan = true;
    for (int i = 0; i < 60; i++) {
      MccCalls p = mcc_2_rtns[i];
      do {
        if (p.gen > mcc_gen) {
          mcc_la = p.arg; mcc_lastpos = mcc_scanpos = p.first;
          switch (i) {
            case 0: mcc_3_1(); break;
            case 1: mcc_3_2(); break;
            case 2: mcc_3_3(); break;
            case 3: mcc_3_4(); break;
            case 4: mcc_3_5(); break;
            case 5: mcc_3_6(); break;
            case 6: mcc_3_7(); break;
            case 7: mcc_3_8(); break;
            case 8: mcc_3_9(); break;
            case 9: mcc_3_10(); break;
            case 10: mcc_3_11(); break;
            case 11: mcc_3_12(); break;
            case 12: mcc_3_13(); break;
            case 13: mcc_3_14(); break;
            case 14: mcc_3_15(); break;
            case 15: mcc_3_16(); break;
            case 16: mcc_3_17(); break;
            case 17: mcc_3_18(); break;
            case 18: mcc_3_19(); break;
            case 19: mcc_3_20(); break;
            case 20: mcc_3_21(); break;
            case 21: mcc_3_22(); break;
            case 22: mcc_3_23(); break;
            case 23: mcc_3_24(); break;
            case 24: mcc_3_25(); break;
            case 25: mcc_3_26(); break;
            case 26: mcc_3_27(); break;
            case 27: mcc_3_28(); break;
            case 28: mcc_3_29(); break;
            case 29: mcc_3_30(); break;
            case 30: mcc_3_31(); break;
            case 31: mcc_3_32(); break;
            case 32: mcc_3_33(); break;
            case 33: mcc_3_34(); break;
            case 34: mcc_3_35(); break;
            case 35: mcc_3_36(); break;
            case 36: mcc_3_37(); break;
            case 37: mcc_3_38(); break;
            case 38: mcc_3_39(); break;
            case 39: mcc_3_40(); break;
            case 40: mcc_3_41(); break;
            case 41: mcc_3_42(); break;
            case 42: mcc_3_43(); break;
            case 43: mcc_3_44(); break;
            case 44: mcc_3_45(); break;
            case 45: mcc_3_46(); break;
            case 46: mcc_3_47(); break;
            case 47: mcc_3_48(); break;
            case 48: mcc_3_49(); break;
            case 49: mcc_3_50(); break;
            case 50: mcc_3_51(); break;
            case 51: mcc_3_52(); break;
            case 52: mcc_3_53(); break;
            case 53: mcc_3_54(); break;
            case 54: mcc_3_55(); break;
            case 55: mcc_3_56(); break;
            case 56: mcc_3_57(); break;
            case 57: mcc_3_58(); break;
            case 58: mcc_3_59(); break;
            case 59: mcc_3_60(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    mcc_rescan = false;
  }

  private void mcc_save(int index, int xla) {
    MccCalls p = mcc_2_rtns[index];
    while (p.gen > mcc_gen) {
      if (p.next == null) { p = p.next = new MccCalls(); break; }
      p = p.next;
    }
    p.gen = mcc_gen + xla - mcc_la; p.first = token; p.arg = xla;
  }

  class MccCalls {
    public int gen;
    public Token first;
    public int arg;
    public MccCalls next;
  }

}
}
